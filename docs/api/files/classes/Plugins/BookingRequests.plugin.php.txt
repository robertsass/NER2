<?php
/**
 * @author Robert Sass <rs@brainedia.de>
 * @copyright 2014-2015 Robert Sass
 * @link http://www.brainedia.com
 * @link http://robertsass.me
 */

namespace Plugins;

require_once( dirname(__FILE__) .'/Bookings.plugin.php' );


/**
 * @author Robert Sass <rs@brainedia.de>
 * @copyright 2014-2015 Robert Sass
 * @internal
 */
interface BookingRequestsInterface {
}


/** BookingRequestsPlugin
 *
 * @author Robert Sass <rs@brainedia.de>
 * @copyright 2014-2015 Robert Sass
 *
 * @extends \rsCore\Plugin
 */
class BookingRequests extends \Plugins\Bookings implements BookingRequestsInterface {


/* Dashboard Widget */

	/** Gibt den Titel des Dashboard-Widgets zur체ck
	 * @return string
	 */
	public static function getDashboardWidgetTitle() {
		return self::t("Booking requests");
	}


	/** Baut das Widget
	 * @param \rsCore\Container $Container
	 */
	public function buildWidget( \rsCore\Container $Container ) {
		$Row = $Container->subordinate( 'div.row' );
		
		$year = date('Y');
		$Begin = \rsCore\Calendar::parse( 'Y-m-d', $year .'-01-01' );
		$End = \rsCore\Calendar::parse( 'Y-m-d', $year .'-12-31' );
		$Counter = $Row->subordinate( 'div.col-md-6 > div.huge-counter.centered' )
			->subordinate( 'span.number', \Site\Booking::countBookingsByTimeframe( $Begin->getDateTime(), $End->getDateTime(), 'request' ) )
			->append( 'span.description', self::t("This year's booking requests") );
			
		$year = $year+1;
		$Begin = \rsCore\Calendar::parse( 'Y-m-d', $year .'-01-01' );
		$End = \rsCore\Calendar::parse( 'Y-m-d', $year .'-12-31' );
		$Counter = $Row->subordinate( 'div.col-md-6 > div.huge-counter.centered' )
			->subordinate( 'span.number', \Site\Booking::countBookingsByTimeframe( $Begin->getDateTime(), $End->getDateTime(), 'request' ) )
			->append( 'span.description', self::t("Next year's booking requests") );
	}


/* Brainstage Plugin */

	/** Erg채nzt den Navigator
	 * @return string
	 */
	public function getNavigatorItem() {
		return self::t("Booking requests");
	}


	/** Baut die Toolbar
	 * @param \rsCore\Container $Container
	 */
	public function buildToolbar( \rsCore\Container $Container ) {
		$Toolbar = $Container->subordinate( 'header > div.row' );
		$this->buildTabBar( $Toolbar->subordinate( 'div.col-md-5' ) );
#		$Toolbar->subordinate( 'div.col-md-7 > input(button).btn btn-primary', array('data-toggle' => 'modal', 'data-target' => '#bookingCreationModal', 'aria-hidden' => 'true', 'value' => t("Add request")) );
	}


	/** Baut die Tabbar zusammen
	 * @param \rsCore\Container $Container
	 */
	public function buildTabBar( \rsCore\Container $Container ) {
		$tabAttr = array('role' => 'tab', 'data-toggle' => 'tab');
		$Bar = $Container->subordinate( 'ul.nav.nav-tabs' );

		$tabs = array(
			'upcoming_bookings'	=> t("Waiting requests"),
			'past_bookings'		=> t("Expired requests"),
		);
		foreach( $tabs as $param => $title ) {
			$attr = array_merge( $tabAttr, array('data-api-parameters' => $param) );
			$Bar->subordinate( 'li > a', $attr, $title );
		}
	}


	/** Baut die Listenansicht der SplitView
	 * @param \rsCore\Container $Container
	 */
	public function buildListView( \rsCore\Container $Container ) {
	#	$Container->addAttribute( 'data-api-url', 'list-requests' );
		return parent::buildListView( $Container );
	}


	/** Baut die Eingabemaske
	 * @param \rsCore\Container $Container
	 */
	public function buildCreationModal( \rsCore\Container $Container ) {
	}


/* API Plugin */

	/** F체gt ein neues Booking ein
	 * @return boolean
	 */
	public function api_addBooking( $params ) {
		$Client = \Site\Client::getClientById( postVar('clientId') );
		$Begin = \rsCore\Calendar::parse( 'Y-m-d', postVar('begin') );
		$End = \rsCore\Calendar::parse( 'Y-m-d', postVar('end') );
		$Booking = \Site\Booking::addBooking( $Client, $Begin, $End );
		if( $Booking ) {
			$Booking->status = 'request';
			$Booking->adopt();
			return $Booking->getColumns();
		}
		return false;
	}


	/** Listet die Bookings auf
	 * @return array
	 */
	public function api_listBookings( $params ) {
		$bookings = \Site\Booking::getRequestedBookings( isset( $params['past_bookings'] ) );
		return self::buildBookingsList( $bookings );
	}


	/** Gibt die Badge-Zahl zur체ck
	 * @return integer
	 */
	public function api_badgeCount( $params ) {
		self::throwExceptionIfNotPrivileged( 'delete' );
		
		$DatabaseConnector = \Site\Booking::getDatabaseConnection();
		$condition = '`status` = "request"';
		$condition .= ' AND `end` > "'. $DatabaseConnector::encodeDatetime( time() ) .'"';
		$count = $DatabaseConnector->count( $condition );
		return $count > 0 ? $count : false;
	}


}
