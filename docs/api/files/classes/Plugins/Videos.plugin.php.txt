<?php
/**
 * @author Robert Sass <rs@brainedia.de>
 * @copyright 2014-2015 Robert Sass
 * @link http://www.brainedia.com
 * @link http://robertsass.me
 */

namespace Plugins;


/**
 * @author Robert Sass <rs@brainedia.de>
 * @copyright 2014-2015 Robert Sass
 * @internal
 */
interface VideosInterface {
}


/** VideosPlugin
 *
 * @author Robert Sass <rs@brainedia.de>
 * @copyright 2014-2015 Robert Sass
 *
 * @extends \rsCore\Plugin
 */
class Videos extends \rsCore\Plugin implements VideosInterface {


	const DEFAULT_INTERVAL_SIZE = 20;
	const YOUTUBE_VIDEO_URL = 'http://youtube.com/watch?v=*VIDEOID*';
	const YOUTUBE_THUMBNAIL_URL = 'http://img.youtube.com/vi/*VIDEOID*/hqdefault.jpg';


	/** Wird von Brainstage aufgerufen, damit sich das Plugin für Hooks registrieren kann
	 *
	 * @param \rsCore\FrameworkInterface $Framework
	 */
	public static function brainstageRegistration( \rsCore\FrameworkInterface $Framework ) {
		$Plugin = self::instance();
		$Framework->registerHook( $Plugin, 'buildHead' );
		$Framework->registerHook( $Plugin, 'buildBody' );
		$Framework->registerHook( $Plugin, 'getNavigatorItem' );
	}


	/** Wird von der API aufgerufen, damit sich das Plugin für Hooks registrieren kann
	 *
	 * @param \rsCore\FrameworkInterface $Framework
	 */
	public static function apiRegistration( \rsCore\FrameworkInterface $Framework ) {
		$Plugin = self::instance();
		$Framework->registerHook( $Plugin, 'add', 'api_addVideo' );
		$Framework->registerHook( $Plugin, 'list', 'api_listVideos' );
		$Framework->registerHook( $Plugin, 'delete', 'api_deleteVideo' );
		$Framework->registerHook( $Plugin, 'save', 'api_saveVideo' );
	}


	/** Wird von Brainstage aufgerufen, um abzufragen, welche Rechtebezeichner vom Plugin verwendet werden
	 *
	 * @return array
	 */
	public static function registerPrivileges() {
		return 'edit,add,delete';
	}


	/** Dient als Konstruktor-Erweiterung
	 */
	protected function init() {
	}


/* Private methods */

	protected function getListIntervalSize() {
		return intval( getVar( 'limit', self::DEFAULT_INTERVAL_SIZE ) );
	}


	protected function getPaginationMax() {
		return ceil( $this->getFileManager()->countVideosFiles() / $this->getListIntervalSize() );
	}


	protected function getPaginationIndex() {
		return getVar( 'page', 1 );
	}


	protected function getVideos( $siteId, $start=0, $limit=self::DEFAULT_INTERVAL_SIZE ) {
			return \Nightfever\Video::getVideosBySite( $siteId );
	}


	protected static function extractVideoId( $videoUrl ) {
		$matches = array();
		preg_match( "/watch\?v=([^&\s]+)|embed\/([^&\s]+)|youtu.be\/([^&\s]+)/mi", $videoUrl, $matches );
		$videoId = array_pop( $matches );
		return $videoId;
	}


	protected static function constructThumbnailUrl( $videoId ) {
		return str_replace( '*VIDEOID*', $videoId, self::YOUTUBE_THUMBNAIL_URL );
	}


	protected static function constructVideoUrl( $videoId ) {
		return str_replace( '*VIDEOID*', $videoId, self::YOUTUBE_VIDEO_URL );
	}


/* Brainstage Plugin */

	/** Ergänzt den Header
	 * @param \rsCore\ProtectivePageHead $Head
	 */
	public function buildHead( \rsCore\ProtectivePageHead $Head ) {
		$Head->linkScript('/static/js/videos.js');
		$Head->linkStylesheet('/static/css/videos.css');
	}


	/** Ergänzt den Navigator
	 * @return string
	 */
	public function getNavigatorItem() {
		return self::t("Videos");
	}


	/** Ergänzt den MainContent
	 * @param \rsCore\Container $Container
	 */
	public function buildBody( \rsCore\Container $Container ) {
		$Container->addAttribute( 'class', 'splitView' );
		$this->buildToolbar( $Container );
		$this->buildVideoView( $Container->subordinate( 'div.headered > div.tab-pane.active#videosView' ) );
	}


	/** Baut die Tabbar zusammen
	 * @param \rsCore\Container $Container
	 */
	public function buildToolbar( \rsCore\Container $Container ) {
		$Toolbar = $Container->subordinate( 'header > div.row' );

		if( self::may('add') )
			$Toolbar->subordinate( 'div.col-md-9 > input(button).btn.btn-primary.newVideo', array('data-toggle' => 'modal', 'data-target' => '#videoEntryModal', 'value' => self::t("Add video")) );

		$Toolbar->subordinate( 'div.col-md-3', \Nightfever\NightfeverBackend::buildSitesSelector( null, null ) );
	}


	/** Baut die VideoView
	 * @param \rsCore\Container $Container
	 */
	public function buildVideoView( \rsCore\Container $Container ) {
		$ModalSpace = $Container->subordinate( 'div.modal-space' );
		$Container = $Container->subordinate( 'div.row' );
		$ListColumn = $Container->subordinate( 'div.col-md-5.list' );
		$DetailColumn = $Container->subordinate( 'div.col-md-7.details' );

		$Table = $ListColumn->subordinate( 'table#videosTable.table table-hover table-striped' );
		$TableBody = $Table->subordinate( 'tbody' );

		$this->buildVideoDetailsView( $DetailColumn );
		if( self::may('add') )
			$this->buildVideoEntryModal( $ModalSpace );
	}


	/** Baut die Detailansicht eines Nutzers
	 * @param \rsCore\Container $Container
	 */
	public function buildVideoDetailsView( \rsCore\Container $Container ) {
		$DetailsView = $Container->subordinate( 'form', array('action' => '/brainstage/plugins/videos/save') );
		$DetailsView->subordinate( 'input(hidden):id' );

/*
		$Title = $DetailsView->subordinate( 'div.title' );
		$Title->subordinate( 'h1', self::t("Details") );
		if( self::may('edit') )
			$Title->subordinate( 'button(button).btn.btn-primary.saveDetails', self::t("Save") );
*/

		$Table = $DetailsView->subordinate( 'table.table.table-striped.has-textfields' );
		$TableBody = $Table->subordinate( 'tbody' );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', self::t("Site") );
		$Row->subordinate( 'td', \Nightfever\NightfeverBackend::buildSitesSelector( 'siteId', null ) );

/*
		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', self::t("Language") );
		$Row->subordinate( 'td', \Nightfever\NightfeverBackend::buildLanguageSelector( 'language' ) );
*/

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', self::t("Date") );
		$Row->subordinate( 'td.date' );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', self::t("Title") );
		$Row->subordinate( 'td > input(text).form-control:title', array('placeholder' => self::t("Title")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', self::t("ID") );
		$Row->subordinate( 'td > input(text).form-control:videoId', array('placeholder' => self::t("ID")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', self::t("URL") );
		$Row->subordinate( 'td > input(text).form-control:url', array('placeholder' => self::t("URL")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', self::t("Thumbnail URL") );
		$Row->subordinate( 'td > input(text).form-control:thumbnailUrl', array('placeholder' => self::t("Thumbnail URL")) );

		$Row = $DetailsView->subordinate( 'div.row' );
		if( self::may('delete') )
			$Row->subordinate( 'div.col-md-6 > button(button).btn.btn-default.removeVideo', self::t("Delete") );
		if( self::may('edit') )
			$Row->subordinate( 'div.col-md-6 > button(button).btn.btn-primary.saveDetails', self::t("Save") );
	}


	/** Baut das Modal des Nutzer-Anlege-Formulars
	 * @param \rsCore\Container $Container
	 */
	public function buildVideoEntryModal( \rsCore\Container $Container ) {
		$Modal = $Container->subordinate( 'div.modal.fade#videoEntryModal', array('aria-hidden' => 'true', 'role' => 'dialog') )
			->subordinate( 'form', array('action' => '/brainstage/plugins/videos/add') )
			->subordinate( 'div.modal-dialog > div.modal-content' );
		$ModalHeader = $Modal->subordinate( 'div.modal-header' );
		$ModalHeader->subordinate( 'button(button).close', array('data-dismiss' => 'modal') )
			->subordinate( 'span', '&times;' );
		$ModalHeader->subordinate( 'h1.modal-title', self::t("Add video") );
		$ModalBody = $Modal->subordinate( 'div.modal-body' );
		$ModalFooter = $Modal->subordinate( 'div.modal-footer' );
		$ModalFooter->subordinate( 'button(button).btn.btn-default', array('data-dismiss' => 'modal'), self::t("Cancel") );
		$ModalFooter->subordinate( 'button(button).btn.btn-primary.saveNewVideo', self::t("Save") );

		$ModalBody->subordinate( 'p', \Nightfever\NightfeverBackend::buildSitesSelector( 'site', null ) );

		$ModalBody->subordinate( 'p > input(text).form-control:url', array('placeholder' => self::t("URL")) );
		$ModalBody->subordinate( 'p > input(text).form-control:title', array('placeholder' => self::t("Title")) );
	}


/* API Plugin */

	/** Listet alle Videos auf
	 * @return array
	 */
	public function api_listVideos( $params ) {
		self::throwExceptionIfNotAuthorized();
		$start = valueByKey( $params, 'start', 0 );
		$limit = null; // valueByKey( $params, 'limit', self::DEFAULT_INTERVAL_SIZE );
		$siteId = valueByKey( $params, 'site' );
		$videos = array();
		foreach( $this->getVideos( $siteId, $start, $limit ) as $Video ) {
			$Relation = \Nightfever\SiteVideo::getRelation( $siteId, $Video );
			$columns = $Video->getColumns();
			$columns['id'] = $Relation->getPrimaryKeyValue();
			$columns['siteId'] = $siteId;
			$columns['date'] = $Video->date->format( t("Y-m-d H:i", 'Date and Time: full year, without seconds') );
			$videos[] = $columns;
		}
		return $videos;
	}


	/** Speichert das Video
	 * @return array
	 */
	public function api_saveVideo( $params ) {
		self::throwExceptionIfNotPrivileged( 'edit' );
		$relationId = postVar( 'id', null );
		$Relation = \Nightfever\SiteVideo::getById( $relationId );
		if( !$Relation )
			return false;
		$Video = $Relation->getVideo();

		$fields = array('title', 'url', 'thumbnailUrl', 'videoId');
		foreach( $fields as $field ) {
			if( isset( $_POST[ $field ] ) ) {
				$value = postVar( $field );
				$Video->set( $field, $value );
			}
		}

		$Relation->siteId = postVar( 'siteId' );

		$columns = $Video->getColumns();
		return $columns;
	}


	/** Erstellt ein Video
	 * @return array
	 */
	public function api_addVideo( $params ) {
		self::throwExceptionIfNotPrivileged( 'add' );

		$Site = \Nightfever\Sites::getSiteById( postVar('site') );
		if( !$Site )
			throw new \Exception( "Videos need to be assigned to a valid Site." );

		$videoUrl = trim( postVar('url') );
		$videoId = self::extractVideoId( $videoUrl );
		$Video = \Nightfever\Video::getVideoByVideoId( $videoId );
		if( !$Video ) {
			$Video = \Nightfever\Video::addVideo( self::constructVideoUrl( $videoId ) );
			$Video->title = postVar('title');
			$Video->videoId = $videoId;
			$Video->thumbnailUrl = self::constructThumbnailUrl( $videoId );
			$Video->adopt();
		}

		$Relation = \Nightfever\SiteVideo::addRelation( $Site, $Video );

		$columns = $Video->getColumns();
		return $columns;
	}


	/** Löscht ein Video
	 * @return boolean
	 */
	public function api_deleteVideo( $params ) {
		self::throwExceptionIfNotPrivileged( 'delete' );
		$Relation = \Nightfever\SiteVideo::getById( postVar('id') );
		if( $Relation ) {
			$Video = $Relation->getVideo();
			$deleted = $Relation->remove();
			$remainingRelations = \Nightfever\SiteVideo::getRelationsByVideo( $Video );
			if( $deleted && empty( $remainingRelations ) )
				return $Video->remove();
			return $deleted;
		}
		return false;
	}


}
