<?php
/**
 * @author Robert Sass <rs@brainedia.de>
 * @copyright 2014-2015 Robert Sass
 * @link http://www.brainedia.com
 * @link http://robertsass.me
 */

namespace Plugins;


/**
 * @author Robert Sass <rs@brainedia.de>
 * @copyright 2014-2015 Robert Sass
 * @internal
 */
interface ClientsInterface {
}


/** ClientsPlugin
 *
 * @author Robert Sass <rs@brainedia.de>
 * @copyright 2014-2015 Robert Sass
 *
 * @extends \rsCore\Plugin
 */
class Clients extends \rsCore\Plugin implements ClientsInterface {


	/** Wird von Brainstage aufgerufen, damit sich das Plugin für Hooks registrieren kann
	 *
	 * @param \rsCore\FrameworkInterface $Framework
	 */
	public static function brainstageRegistration( \rsCore\FrameworkInterface $Framework ) {
		$Plugin = self::instance();
		$Framework->registerHook( $Plugin, 'buildHead' );
		$Framework->registerHook( $Plugin, 'buildBody' );
		$Framework->registerHook( $Plugin, 'getNavigatorItem' );
	}


	/** Wird von der API aufgerufen, damit sich das Plugin für Hooks registrieren kann
	 *
	 * @param \rsCore\FrameworkInterface $Framework
	 */
	public static function apiRegistration( \rsCore\FrameworkInterface $Framework ) {
		$Plugin = self::instance();
		$Framework->registerHook( $Plugin, 'add', 'api_addClient' );
		$Framework->registerHook( $Plugin, 'list', 'api_listClients' );
		$Framework->registerHook( $Plugin, 'save', 'api_saveClient' );
		$Framework->registerHook( $Plugin, 'delete', 'api_deleteClient' );
	}


	/** Wird von Brainstage aufgerufen, um abzufragen, welche Rechtebezeichner vom Plugin verwendet werden
	 *
	 * @return array
	 */
	public static function registerPrivileges() {
		return 'add,edit,delete';
	}


	/** Dient als Konstruktor-Erweiterung
	 */
	protected function init() {
		parent::init();
	}


/* Brainstage Plugin */

	/** Ergänzt den Navigator
	 * @return string
	 */
	public function getNavigatorItem() {
		return t("Clients");
	}


	/** Ergänzt den Header
	 * @param \rsCore\ProtectivePageHead $Head
	 */
	public function buildHead( \rsCore\ProtectivePageHead $Head ) {
		$Head->linkStylesheet( '/static/css/clients.css' );
		$Head->linkScript( '/static/js/clients.js' );
	}


	/** Ergänzt den MainContent
	 * @param \rsCore\Container $Container
	 */
	public function buildBody( \rsCore\Container $Container ) {
		$Container->addAttribute( 'class', 'splitView' );
		$this->buildToolbar( $Container );
		$this->buildSplitView( $Container->subordinate( 'div.headered' ) );
	}


	/** Baut die Toolbar
	 * @param \rsCore\Container $Container
	 */
	public function buildToolbar( \rsCore\Container $Container ) {
		$Toolbar = $Container->subordinate( 'header > div.row' );
		$Toolbar->subordinate( 'div.col-md-9 > input(button).btn btn-primary', array('data-toggle' => 'modal', 'data-target' => '#clientCreationModal', 'aria-hidden' => 'true', 'value' => t("Add client")) );
	}


	/** Baut die SplitView
	 * @param \rsCore\Container $Container
	 */
	public function buildSplitView( \rsCore\Container $Container ) {
		$ModalSpace = $Container->subordinate( 'div.modal-space' );
		$Container = $Container->subordinate( 'div.row' );
		$ListColumn = $Container->subordinate( 'div.col-md-5.list' );
		$DetailColumn = $Container->subordinate( 'div.col-md-7.details' );

		$this->buildListView( $ListColumn );
		$this->buildDetailsView( $DetailColumn );

		if( self::may('add') )
			$this->buildCreationModal( $ModalSpace );
	}


	/** Baut die Listenansicht der SplitView
	 * @param \rsCore\Container $Container
	 */
	public function buildListView( \rsCore\Container $Container ) {
		$Table = $Container->subordinate( 'table.table#clientTable table-hover table-striped' );
		$Row = $Table->subordinate( 'thead > tr' );
		$Row->subordinate( 'th', t("Last name") );
		$Row->subordinate( 'th', t("First name") );
		$Row->subordinate( 'th', t("E-Mail") );
		$TableBody = $Table->subordinate( 'tbody' );
	}


	/** Baut die Detailansicht der SplitView
	 * @param \rsCore\Container $Container
	 */
	public function buildDetailsView( \rsCore\Container $Container ) {
		$DetailsView = $Container->subordinate( 'form', array('action' => 'save') );
		$DetailsView->subordinate( 'input(hidden):id' );

		$Title = $DetailsView->subordinate( 'div.title' );
		$Title->subordinate( 'h1', t("Details") );
		if( self::may('edit') )
			$Title->subordinate( 'button(button).btn.btn-primary.save', t("Save") );

		$Table = $DetailsView->subordinate( 'table.table.table-striped.has-textfields' );
		$TableBody = $Table->subordinate( 'tbody' );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', t("Last name") );
		$Row->subordinate( 'td > input(text).form-control:lastname', array('placeholder' => t("Last name")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', t("First name") );
		$Row->subordinate( 'td > input(text).form-control:firstname', array('placeholder' => t("Last name")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', t("E-Mail") );
		$Row->subordinate( 'td > input(text).form-control:email', array('placeholder' => t("E-Mail")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', t("Address") );
		$Row->subordinate( 'td > input(text).form-control:address', array('placeholder' => t("Address")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', t("Address") .' 2' );
		$Row->subordinate( 'td > input(text).form-control:address2', array('placeholder' => t("Address") .' 2') );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', t("Postal code") );
		$Row->subordinate( 'td > input(text).form-control:zip', array('placeholder' => t("Postal code")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', t("City") );
		$Row->subordinate( 'td > input(text).form-control:city', array('placeholder' => t("City")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', t("Country") );
		$Row->subordinate( 'td > input(text).form-control:country', array('placeholder' => t("Country")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', t("Phone number") );
		$Row->subordinate( 'td > input(text).form-control:telephone', array('placeholder' => t("Phone number")) );

		$Row = $TableBody->subordinate( 'tr' );
		$Row->subordinate( 'th', t("Mobile phone number") );
		$Row->subordinate( 'td > input(text).form-control:mobile', array('placeholder' => t("Mobile phone number")) );

		$Row = $DetailsView->subordinate( 'div.row' );
		if( self::may('delete') )
			$Row->subordinate( 'div.col-md-6 > button(button).btn.btn-default.remove', t("Delete") );
		if( self::may('edit') )
			$Row->subordinate( 'div.col-md-6 > button(button).btn.btn-primary.save', t("Save") );
	}


	/** Baut die Eingabemaske
	 * @param \rsCore\Container $Container
	 */
	public function buildCreationModal( \rsCore\Container $Container ) {
		$Form = $Container->subordinate( 'form', array('action' => 'add') );
		$Modal = $Form->subordinate( 'div#clientCreationModal.modal fade', array('aria-hidden' => 'true') )
						->subordinate( 'div.modal-dialog > div.modal-content' );
		$ModalHead = $Modal->subordinate( 'div.modal-header' );
		$ModalBody = $Modal->subordinate( 'div.modal-body' );
		$ModalFoot = $Modal->subordinate( 'div.modal-footer' );

		$ModalHead->subordinate( 'button(button).close', array('data-dismiss' => 'modal') )
				->subordinate( 'span', array('aria-hidden' => 'true'), '&times;' );
		$ModalHead->subordinate( 'h1.modal-title', t("Add client") );

		$ModalFoot->subordinate( 'button.btn btn-primary save', t("Save") );

		$Form = $ModalBody;

		$Form->subordinate( 'p > input.form-control(text):email', array('placeholder' => t("E-Mail")) );
		
		$Row = $Form->subordinate( 'div.row' );
		$Row->subordinate( 'div.col-md-6 > input.form-control(text):lastname', array('placeholder' => t("Last name")) );
		$Row->subordinate( 'div.col-md-6 > input.form-control(text):firstname', array('placeholder' => t("First name")) );
	}


/* API Plugin */

	/** Fügt ein neues Client ein
	 * @return boolean
	 */
	public function api_addClient( $params ) {
		self::throwExceptionIfNotPrivileged( 'add' );
		$Client = \Site\Client::addClient( trim( postVar('email') ), false );
		if( $Client ) {
			$Client->firstname = trim( postVar('firstname') );
			$Client->lastname = trim( postVar('lastname') );
			$Client->adopt();
			return $Client->getColumns();
		}
		return null;
	}


	/** Listet die Clients auf
	 * @return array
	 */
	public function api_listClients( $params ) {
		$list = array();
		foreach( \Site\Client::getClients() as $Client ) {
			$array = $Client->getColumns();
			$list[] = $array;
		}
		return $list;
	}


	/** Speichert Veranstaltungsdetails
	 * @return array
	 */
	public function api_saveClient( $params ) {
		self::throwExceptionIfNotPrivileged( 'edit' );
		$Client = \Site\Client::getClientById( postVar('id') );
		if( !$Client )
			return false;

		if( postVar('email') ) {
			$ExistingClient = \Site\Client::getClientByEmail( postVar('email') );
			if( $ExistingClient && $ExistingClient->getPrimaryKeyValue() != $Client->getPrimaryKeyValue() )
				return false;
		}

		$fields = array('firstname', 'lastname', 'email', 'address', 'address2', 'zip', 'city', 'country', 'telephone', 'mobile');
		foreach( $fields as $field ) {
			if( isset( $_POST[ $field ] ) ) {
				$value = postVar( $field );
				$Client->set( $field, $value );
			}
		}

		return $Client->getColumns();
	}


	/** Löscht ein Client
	 * @return boolean
	 * @todo Prüfen ob das Client auch im Zuständigkeitsbereich liegt und gelöscht werden darf
	 */
	public function api_deleteClient( $params ) {
		self::throwExceptionIfNotPrivileged( 'delete' );
		$Client = \Site\Client::getClientById( postVar('id') );
		if( $Client )
			return $Client->remove();
	}


}
